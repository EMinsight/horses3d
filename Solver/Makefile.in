#####################################################################
## HORSES - a High-Order Spectral Element Solver
##
##	Main code Makefile
##
##
#####################################################################

########################################
# 1.- User defined parameters
########################################
PLATFORM?=LINUX
COMPILER?=gfortran
MODE?=RELEASE
COMM?=PARALLEL
MAKE=make
AR=ar
RANLIB=ranlib

########################################
# 2.- User defined paths
########################################
HOME_DIR?=@HORSES_HOME_DIR
INSTALL_DIR=$(HOME_DIR)
INCLUDE=-I$(HOME_DIR)/include
LIBS = 
MACROS = 
-include $(HOME_DIR)/make.inc

########################################
# 3.- User defined compilation flags 
########################################
GNU_RELEASE_FLAGS= -cpp -ffree-line-length-0 -O3 -ftree-vectorize  -ftree-vectorizer-verbose=0 \
		   -fbackslash -D_has_Quad
GNU_DEBUG_FLAGS=  -fPIC -ffree-line-length-0 -cpp -O0 -g -fcheck=all -Wno-unused-variable \
		  -fbacktrace -fbounds-check -finit-real=snan -Wall \
		  -ffpe-trap=invalid,zero,overflow -fcheck-array-temporaries \
		  -fbackslash -fcheck=pointer -D_has_Quad
INTEL_RELEASE_FLAGS= -cpp -O3 -assume bscc -D_has_Quad
INTEL_DEBUG_FLAGS= -cpp -O0 -g -warn all -fpscomp logicals -traceback -check all \
		   -check bounds -check uninit -ftrapuv -debug all \
		   -ftrace=full -assume ieee_fpe_flags -ftz -fp-model precise \
		   -fp-speculation=off -assume bscc -D_has_Quad
ARFLAGS=crv


##########################################
## Select platform
##########################################
ifeq ($(PLATFORM),MACOSX)
   DYNLIB_FLAG=-fPIC -shared -install_name @rpath/libproblemfile.dylib -o ./libproblemfile.dylib
   PROBLEM_LIB=$(HOME_DIR)/lib/libproblemfile.dylib -Wl,-rpath,./SETUP -Wl,-rpath,$(HOME_DIR)/lib
else ifeq ($(PLATFORM),LINUX)
   DYNLIB_FLAG=-fPIC -shared -o ./libproblemfile.so
   PROBLEM_LIB=-L$(HOME_DIR)/lib -lproblemfile -Wl,-rpath=./SETUP -Wl,-rpath=$(HOME_DIR)/lib
endif

##########################################
## Select compiler 
##########################################
ifeq ($(COMPILER),gfortran)
  FC:=gfortran
  MOD_FLAG:=-J
else ifeq ($(COMPILER),gnu)
  FC:=gfortran
  MOD_FLAG:=-J
else ifeq ($(COMPILER),GNU)
  FC:=gfortran
  MOD_FLAG:=-J
endif

ifeq ($(COMPILER),ifort)
  FC:=ifort
  MOD_FLAG:=-module 
else ifeq ($(COMPILER),intel)
  FC:=ifort
  MOD_FLAG:=-module 
else ifeq ($(COMPILER),INTEL)
  FC:=ifort
  MOD_FLAG:=-module 
endif

##########################################
## Select mode
##########################################
ifeq ($(MODE),RELEASE)
     ifeq ($(FC),gfortran)
         FFLAGS=$(GNU_RELEASE_FLAGS)
     else ifeq ($(FC),ifort)
         FFLAGS=$(INTEL_RELEASE_FLAGS)
     endif
else ifeq ($(MODE),DEBUG)
     ifeq ($(FC),gfortran)
         FFLAGS=$(GNU_DEBUG_FLAGS)
     else ifeq ($(FC),ifort)
         FFLAGS=$(INTEL_DEBUG_FLAGS)
     endif
endif

ifeq ($(MODE),RELEASE)
   ifeq ($(COMM),PARALLEL)
      FFLAGS+=-fopenmp
   endif
endif


##########################
## 	Link PETSc 	##
##########################
ifeq '$(WITH_PETSC)''y'
  MACROS+= -DHAS_PETSC
  LIBS += $(PETSC_LIB)
  INCLUDE+= $(PETSC_INC)
endif

##########################
## 	Link MKL 	##
##########################
ifeq '$(WITH_MKL)''y'
	ifeq '$(FC)''gfortran'
		MACROS+= -DHAS_MKL -DHAS_LAPACK
  	LIBS += $(LIB_BLAS) $(LIB_LAPACK)
  else #ifort
  	MACROS+= -DHAS_MKL
  	FCFLAGS+= -mkl
  endif
endif

##########################################
##  	Select HORSES libraries 	##
##########################################
HORSES_LIBS=ftobject foundation spectral io physics mesh plot jacobian monitors
HORSES_LIBS_REORD=monitors jacobian plot mesh physics io spectral foundation ftobject
HORSES_LIBS_EXEC=$(foreach obj,$(HORSES_LIBS_REORD),$(HOME_DIR)/lib/lib$(obj).a)
ADDONS=horses2tecplot
LIBFLAGS=  FC='$(FC)' \
	   FFLAGS='$(FFLAGS)' \
	   INCLUDE='$(INCLUDE)' \
           INSTALL_DIR='$(INSTALL_DIR)' \
	   AR='$(AR)' \
	   ARFLAGS='$(ARFLAGS)' \
	   RANLIB='$(RANLIB)' \
	   MOD_FLAG='$(MOD_FLAG)'

HORSESFLAGS= FC='$(FC)' \
 	     FFLAGS='$(FFLAGS)'\
             INCLUDE='$(INCLUDE)' \
             INSTALL_DIR='$(INSTALL_DIR)' \
	     MOD_FLAG='$(MOD_FLAG)'\
	     HORSES_LIBS_EXEC='$(HORSES_LIBS_EXEC) $(PROBLEM_LIB)' \
	     MACROS='$(MACROS)'

ADDONSFLAGS= FC='$(FC)' \
 	     FFLAGS='$(FFLAGS)'\
             INCLUDE='$(INCLUDE)' \
             INSTALL_DIR='$(INSTALL_DIR)' \
	     MOD_FLAG='$(MOD_FLAG)'\
	     HORSES_LIBS_EXEC='$(HORSES_LIBS_EXEC)' \
	     MACROS='$(MACROS)'


##########################################################
##		COMPILATION RULES 			##
##########################################################

.DEFAULT_GOAL := all

all: header mkdirs horseslibs problemfilelib HORSES3D addons

install: FORCE
	cp -f $(HOME_DIR)/bin/HORSES3D /usr/local/bin
	cp -f $(HOME_DIR)/bin/horses2plt /usr/local/bin
	cp -f $(HOME_DIR)/lib/libproblemfile.so /usr/local/lib


HORSES3D: 
	(cd $(HOME_DIR)/src/NavierStokesSolver/ && $(MAKE) $(HORSESFLAGS) install) || exit 1; 

problemfilelib: 
	(cd $(HOME_DIR)/src/libs/problemfile/ && $(MAKE) PLATFORM=$(PLATFORM) $(LIBFLAGS) DYNLIB_FLAG='$(DYNLIB_FLAG)' install) || exit 1;

horseslibs:
	@for subdir in $(HORSES_LIBS); do \
	    (cd $(HOME_DIR)/src/libs/$$subdir && $(MAKE) $(LIBFLAGS) install) || exit 1; \
	done

bench: all
	(export PYTHONPATH=$(HOME_DIR)/../utils/PythonUtilities \
	&& export PYTHONISDEFINED=YES \
	&& echo $(PYTHONPATH) \
	&& cd $(HOME_DIR)/test/Euler/Benchmark/SETUP && $(MAKE) MODE=$(MODE) COMPILER=$(COMPILER) COMM=$(COMM) allclean all \
	&& cd ../ && ./Benchmark ) || exit 1;



addons:
	@for subdir in $(ADDONS); do \
	    (cd $(HOME_DIR)/src/addons/$$subdir && $(MAKE) $(ADDONSFLAGS) install) || exit 1; \
	done

##########################################
##	Extra auxiliar rules 		##
##########################################
clean: FORCE horseslibclean problemfileclean horsesclean addonsclean
	$(info Removing object *.o files from $(NSLITE3D_PATH)/build)
	$(info Removing module *.mod files from $(NSLITE3D_PATH)/include)
	@rm -f $(HOME_DIR)/build/*.o* $(HOME_DIR)/include/*.mod $(HOME_DIR)/include/*.h $(HOME_DIR)/lib/*.a
	@rm -f $(HOME_DIR)/lib/libproblemfile.so

test: all
	(cd $(HOME_DIR)/test/Euler/Diffuser/SETUP && $(MAKE) MODE=$(MODE) COMPILER=$(COMPILER) COMM=$(COMM) allclean all \
	&& cd ../ && ./HORSES3D DiffuserFlow.control ) || exit 1; 
	(cd $(HOME_DIR)/test/NavierStokes/Cylinder/SETUP && $(MAKE) MODE=$(MODE) COMPILER=$(COMPILER) COMM=$(COMM) allclean all \
	&& cd ../ && ./HORSES3D Cylinder.control ) || exit 1; 

allclean: FORCE clean
	@rm -f $(HOME_DIR)/bin/*

horseslibclean: FORCE
	@for subdir in $(HORSES_LIBS); do \
	 echo "clean $$subdir"; \
	 (cd $(HOME_DIR)/src/libs/$$subdir && $(MAKE) $(LIBFLAGS) clean ) || exit 1; \
	 done

problemfileclean: FORCE
	(cd $(HOME_DIR)/src/libs/problemfile && $(MAKE) $(LIBFLAGS) clean) || exit 1; 

horsesclean: FORCE
	(cd $(HOME_DIR)/src/NavierStokesSolver && $(MAKE) $(HORSESFLAGS) clean) || exit 1;

addonsclean: FORCE
	@for subdir in $(ADDONS); do \
		(cd $(HOME_DIR)/src/addons/$$subdir && $(MAKE) $(ADDONSFLAGS) clean) || exit 1; \
	done

mkdirs: FORCE
	@mkdir -p $(HOME_DIR)/build
	@mkdir -p $(HOME_DIR)/include
	@mkdir -p $(HOME_DIR)/bin
	@mkdir -p $(HOME_DIR)/lib

header: FORCE
	@echo
	@echo "================================"
	@echo ">>   Building HORSES3D   "
	@echo "================================"
	@echo
	@echo

## Dummy target to make sure a rule is executed
FORCE:
